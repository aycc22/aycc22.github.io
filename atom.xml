<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-01T08:42:24.784Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>喵喵 虎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清理maven .lastUpdate文件</title>
    <link href="http://yoursite.com/2019/08/01/%E6%B8%85%E7%90%86maven-lastUpdate%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/08/01/清理maven-lastUpdate文件/</id>
    <published>2019-08-01T08:38:06.000Z</published>
    <updated>2019-08-01T08:42:24.784Z</updated>
    
    <content type="html"><![CDATA[<p>Maven jar依赖下载失败时，有可能出现.lastUpdated结尾的文件，这时需要删除后，重新下载。<br>删除所有以.lastUpdate结尾的文件</p><ol><li><p>切换到maven的本地仓库</p></li><li><p>在当前目录打开cmd命令行</p></li><li><p>执行命令：for /r %i in (*.lastUpdated) do del %i</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven jar依赖下载失败时，有可能出现.lastUpdated结尾的文件，这时需要删除后，重新下载。&lt;br&gt;删除所有以.lastUpdate结尾的文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;切换到maven的本地仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在当前目录打开cmd命
      
    
    </summary>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>spring注解</title>
    <link href="http://yoursite.com/2019/07/23/spring%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/23/spring注解/</id>
    <published>2019-07-23T02:17:29.000Z</published>
    <updated>2019-07-23T02:28:11.102Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>@Configuration</p></li><li><p>@Bean<br> 导入的第三包组件,可能使用@Bean</p></li><li><p>@Scope</p></li></ol><ol start="4"><li><p>@Conditional</p></li><li><p>@Import<br>@Import({C1.class, c2.class …}) </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;@Configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Bean&lt;br&gt; 导入的第三包组件,可能使用@Bean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Scope&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;p&gt;@Cond
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring java" scheme="http://yoursite.com/tags/spring-java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式(Singleton Pattern)</title>
    <link href="http://yoursite.com/2019/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Singleton-Pattern/"/>
    <id>http://yoursite.com/2019/07/19/设计模式-单例模式-Singleton-Pattern/</id>
    <published>2019-07-19T03:26:27.000Z</published>
    <updated>2019-07-23T00:54:16.355Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h2 id="这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。"><a href="#这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。" class="headerlink" title="这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。"></a>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</h2><p>jdk 中 Runtime 类使用了单例模工</p><p>分为饿汉和懒汉两种，又有线程安全和非线程安全</p><p>没有接口，不能继承，</p><p>单例模式违反了单一职责原则，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><blockquote><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;
&lt;h2 id=&quot;这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式 JAVA" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计原则</title>
    <link href="http://yoursite.com/2019/07/18/JAVA%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/07/18/JAVA设计原则/</id>
    <published>2019-07-18T02:53:03.000Z</published>
    <updated>2019-07-23T00:52:39.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h2><p>类和方法保持单一，只做自己的事。 也就是说只能有一个原因会导致改类和方法的，不能因为修改一个功能导致另一个功能发生故障。</p><h2 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2. 开闭原则"></a>2. 开闭原则</h2><p>对扩展开放（提供者），对修改关闭（使用者）。用抽象构建框架，用实现扩展细节。<br>当软件需要变化时，通过扩展软件实体行为来实现变化，而不是修改已有的代码来实现。</p><h2 id="3-迪米特法则"><a href="#3-迪米特法则" class="headerlink" title="3. 迪米特法则"></a>3. 迪米特法则</h2><p>又称为最少知道原则<br>迪米特法则其根本思想，是强调了类之间的松耦合，类之间的耦合越弱,越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成影响，也就是说，信息的隐藏促进了软件的复用。  </p><p>自从我们接触编程开始，就知道了软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。低耦合的优点不言而喻，但是怎么样编程才能做到低耦合呢？那正是迪米特法则要去完成的。</p><p>迪米特法则又叫最少知道原则，最早是在1987年由美国Northeastern University的Ian Holland提出。通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。</p><p>迪米特法则还有一个更简单的定义：只与直接的朋友通信。</p><p>首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。</p><p>耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。</p><p>也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</p><p>一句话总结就是：一个对象应该对其他对象保持最少的了解。</p><h2 id="4-依赖倒置原则"><a href="#4-依赖倒置原则" class="headerlink" title="4. 依赖倒置原则"></a>4. 依赖倒置原则</h2><p>  强调面向接口编程<br>  定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。即针对接口编程，不要针对实现编程</p><p>  依赖倒转其实就是谁也不要依靠谁，除了约定的接口，大家都可以灵活自如。依赖倒转可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。如果设计的各个部件或类相互依赖，这样就是耦合度高，难以维护和扩展，这也就体现不出面向对象的好处了。</p><p>  依赖倒转原则，好比一个团队，有需求组，开发组，测试组，开发组和测试组都是面对同样的需求后，做自己相应的工作，而不应该是测试组按照开发组理解的需求去做测试用例，也就是说开发组和测试组都是直接面向需求组工作，大家的目的是一样的，保证产品按时上线，需求是不依赖于开发和测试的。</p><p>  依赖倒置原则基于这样一个事实：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</p><p>  依赖倒置原则的中心思想是面向接口编程，传递依赖关系有三种方式，以上的说的是是接口传递，另外还有两种传递方式：构造方法传递和setter方法传递，相信用过Spring框架的，对依赖的传递方式一定不会陌生。</p><h2 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5. 接口隔离原则"></a>5. 接口隔离原则</h2><p>  接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><p>  说到这里，很多人会觉的接口隔离原则跟单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p><p>  采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ol><li><p>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</p></li><li><p>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</p></li><li><p>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</p><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p></li></ol><h2 id="6-组合复用原则"><a href="#6-组合复用原则" class="headerlink" title="6. 组合复用原则"></a>6. 组合复用原则</h2><p>   依赖(方法使用是对象传参方式)，组合(成员变量 = new)，聚合(成员变量 setter)代替继承</p><p>   组合-对象不可分离</p><p>   聚合-对象可以分离</p><h2 id="7-里氏替换原则"><a href="#7-里氏替换原则" class="headerlink" title="7. 里氏替换原则"></a>7. 里氏替换原则</h2><p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><p>定义2：子类型必须能够替换掉它们的父类型。</p><p>里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：</p><p>1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</p><p>2.子类中可以增加自己特有的方法。</p><p>3.当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</p><p>4.当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</p><p>看上去很不可思议，因为我们会发现在自己编程中常常会违反里氏替换原则，程序照样跑的好好的。所以大家都会产生这样的疑问，假如我非要不遵循里氏替换原则会有什么后果？</p><p>后果就是：你写的代码出问题的几率将会大大增加</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-单一职责原则&quot;&gt;&lt;a href=&quot;#1-单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;1. 单一职责原则&quot;&gt;&lt;/a&gt;1. 单一职责原则&lt;/h2&gt;&lt;p&gt;类和方法保持单一，只做自己的事。 也就是说只能有一个原因会导致改类和方法的，不能因为修改
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式 JAVA" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-JAVA/"/>
    
  </entry>
  
  <entry>
    <title>表字段生成 java成员变量</title>
    <link href="http://yoursite.com/2019/07/10/orcale-%E8%A1%A8%E5%AD%97%E6%AE%B5%E7%94%9F%E6%88%90-java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/07/10/orcale-表字段生成-java成员变量/</id>
    <published>2019-07-10T02:08:52.000Z</published>
    <updated>2019-07-11T02:37:30.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="orcale"><a href="#orcale" class="headerlink" title="orcale"></a>orcale</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">'private '</span> || <span class="keyword">case</span></span><br><span class="line">         <span class="keyword">when</span> A.DATA_TYPE = <span class="string">'NUMBER'</span> <span class="keyword">and</span> a.DATA_SCALE &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          <span class="string">'BigDecimal '</span> || <span class="keyword">lower</span>(A.COLUMN_NAME) || <span class="string">';   /* '</span> ||</span><br><span class="line">          <span class="keyword">replace</span>(COMMENTS, <span class="keyword">chr</span>(<span class="number">10</span>), <span class="keyword">chr</span>(<span class="number">32</span>)) || <span class="string">' */'</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">decode</span>(A.DATA_TYPE,</span><br><span class="line">                 <span class="string">'VARCHAR2'</span>,</span><br><span class="line">                 <span class="string">'String '</span>,</span><br><span class="line">                 <span class="string">'NUMBER'</span>,</span><br><span class="line">                 <span class="string">'Integer '</span>,</span><br><span class="line">                 <span class="string">'DATE'</span>,</span><br><span class="line">                 <span class="string">'Date '</span>) || <span class="keyword">lower</span>(A.COLUMN_NAME) || <span class="string">';   /* '</span> ||</span><br><span class="line">          <span class="keyword">replace</span>(COMMENTS, <span class="keyword">chr</span>(<span class="number">10</span>), <span class="keyword">chr</span>(<span class="number">32</span>)) || <span class="string">' */'</span></span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">as</span> title</span><br><span class="line">  <span class="keyword">from</span> user_tab_columns A, user_col_comments B</span><br><span class="line"> <span class="keyword">where</span> A.TABLE_NAME = <span class="string">'SB_JLZC'</span></span><br><span class="line">   <span class="keyword">AND</span> A.TABLE_NAME = B.table_name(+)</span><br><span class="line">   <span class="keyword">AND</span> A.column_name = B.column_name(+)</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> A.COLUMN_ID <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;orcale&quot;&gt;&lt;a href=&quot;#orcale&quot; class=&quot;headerlink&quot; title=&quot;orcale&quot;&gt;&lt;/a&gt;orcale&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/10/hello-world/"/>
    <id>http://yoursite.com/2019/07/10/hello-world/</id>
    <published>2019-07-10T00:39:23.737Z</published>
    <updated>2019-07-10T00:39:23.737Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
